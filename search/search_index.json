{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#datafusion-ml","title":"datafusion-ml","text":"<p>Statistical fusion of two datasets using overlapping features and machine learning.</p> <p>Features: - Overlap-based feature selection between dataset A and B - Bidirectional prediction (A-&gt;B and B-&gt;A) using PyCaret or scikit-learn - Cross-validated metrics summary - Simple CLI and clean Python API</p> <p>Install:</p> <pre><code>pip install datafusion-ml  # when published\n# or for development\npip install -r requirements.txt\n</code></pre>"},{"location":"api/","title":"API","text":""},{"location":"api/#api","title":"API","text":""},{"location":"api/#fuse_datasetsdf_a-df_b-overlap_featuresnone-targets_from_anone-targets_from_bnone-problem_type_mapnone-prefer_pycarettrue-random_state42","title":"fuse_datasets(df_a, df_b, overlap_features=None, targets_from_a=None, targets_from_b=None, problem_type_map=None, prefer_pycaret=True, random_state=42)","text":"<p>Returns a <code>FusionResult</code> with: - <code>fused</code>: fused DataFrame - <code>a_enriched</code>: A enriched with predictions from B-only columns - <code>b_enriched</code>: B enriched with predictions from A-only columns - <code>models_a_to_b</code> and <code>models_b_to_a</code>: trained models - <code>metrics_a_to_b</code> and <code>metrics_b_to_a</code>: cross-validated metrics</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":""},{"location":"usage/#python-api","title":"Python API","text":"<pre><code>import pandas as pd\nfrom datafusion_ml import fuse_datasets\n\nA = pd.DataFrame({\n    \"age_group\": [\"18-29\", \"30-44\", \"45-59\", \"60+\"],\n    \"income_bracket\": [\"low\", \"mid\", \"mid\", \"high\"],\n    \"education\": [\"HS\", \"BA\", \"MA\", \"HS\"],\n    \"target_only_in_A\": [1, 0, 1, 0],\n})\nB = pd.DataFrame({\n    \"age_group\": [\"18-29\", \"30-44\", \"45-59\", \"60+\"],\n    \"income_bracket\": [\"mid\", \"mid\", \"high\", \"low\"],\n    \"education\": [\"HS\", \"BA\", \"HS\", \"PhD\"],\n    \"numeric_only_in_B\": [3.2, 1.5, 2.7, 4.1],\n})\n\nres = fuse_datasets(A, B)\nprint(res.fused.shape)\n</code></pre>"},{"location":"usage/#cli","title":"CLI","text":"<pre><code>datafusion-ml \\\n  --a path/to/a.csv \\\n  --b path/to/b.csv \\\n  --out-fused fused.csv \\\n  --out-a a_enriched.csv \\\n  --out-b b_enriched.csv\n</code></pre>"},{"location":"tutorials/advanced/","title":"Advanced","text":""},{"location":"tutorials/advanced/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Custom overlap features: pass <code>overlap_features=[...]</code></li> <li>Explicit targets: use <code>targets_from_a</code> and <code>targets_from_b</code></li> <li>Disable PyCaret and use sklearn only: <code>prefer_pycaret=False</code></li> <li>Reproducibility: set <code>random_state</code></li> </ul>"},{"location":"tutorials/breast_cancer/","title":"Breast Cancer (sklearn)","text":""},{"location":"tutorials/breast_cancer/#breast-cancer-sklearn-example","title":"Breast Cancer (sklearn) Example","text":"<p>This tutorial uses the built-in <code>sklearn.datasets.load_breast_cancer</code> dataset. We derive two datasets: - A: overlapping features + classification target <code>diagnosis</code> - B: same overlapping features + synthetic regression target <code>risk_score</code></p> <pre><code>from sklearn.datasets import load_breast_cancer\nimport numpy as np\nimport pandas as pd\nfrom datafusion_ml import fuse_datasets\n\ndata = load_breast_cancer(as_frame=True)\ndf = data.frame.rename(columns={\"target\": \"diagnosis\"})\noverlap = [\n    \"mean radius\", \"mean texture\", \"mean perimeter\", \"mean smoothness\"\n]\nA = df[overlap + [\"diagnosis\"]].copy()\n\nrng = np.random.default_rng(42)\nweights = np.array([0.5, 0.2, 0.2, 0.1])\nbase = A[overlap].to_numpy() @ weights\nnoise = rng.normal(0.0, 0.5, size=base.shape[0])\nB = df[overlap].copy()\nB[\"risk_score\"] = base + noise\n\nres = fuse_datasets(A, B)\nres.fused.head()\n</code></pre> <p>CLI usage with prepared CSVs:</p> <pre><code>python examples/prepare_sklearn_breast_cancer.py\npython -m datafusion_ml.cli \\\n  --a examples/data/A_bc.csv \\\n  --b examples/data/B_bc.csv \\\n  --out-fused examples/data/fused_bc.csv \\\n  --out-a examples/data/A_bc_enriched.csv \\\n  --out-b examples/data/B_bc_enriched.csv\n</code></pre>"},{"location":"tutorials/quickstart/","title":"Quickstart","text":""},{"location":"tutorials/quickstart/#quickstart-tutorial","title":"Quickstart Tutorial","text":"<p>This tutorial walks through fusing two small datasets.</p> <pre><code>import pandas as pd\nfrom datafusion_ml import fuse_datasets\n\nA = pd.DataFrame({\n    \"age_group\": [\"18-29\", \"30-44\", \"45-59\", \"60+\"],\n    \"income_bracket\": [\"low\", \"mid\", \"mid\", \"high\"],\n    \"education\": [\"HS\", \"BA\", \"MA\", \"HS\"],\n    \"target_only_in_A\": [1, 0, 1, 0],\n})\nB = pd.DataFrame({\n    \"age_group\": [\"18-29\", \"30-44\", \"45-59\", \"60+\"],\n    \"income_bracket\": [\"mid\", \"mid\", \"high\", \"low\"],\n    \"education\": [\"HS\", \"BA\", \"HS\", \"PhD\"],\n    \"numeric_only_in_B\": [3.2, 1.5, 2.7, 4.1],\n})\n\nres = fuse_datasets(A, B)\nprint(res.metrics_a_to_b)\nprint(res.metrics_b_to_a)\n</code></pre>"}]}